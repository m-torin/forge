# Cursor Rules for Forge Monorepo

## Primary Goal
Enable fully autonomous operation with minimal user intervention. Follow explicit rules, avoid common mistakes, and use established patterns.

## Critical Restrictions

### NEVER Do These
- **NEVER run `pnpm dev` or `npm dev` commands** - These should only be run by the user
- **NEVER use localStorage/sessionStorage in artifacts** - Use React state or JavaScript variables
- **NO file extensions in imports** - ESLint handles resolution automatically
- **NO BULK FILE FIX SCRIPTS** - NEVER create or use bash scripts, shell scripts, or scripts in any language to bulk fix multiple files. Always fix files one by one
- **NO direct `process.env` access in client components** - Always use safeEnv pattern
- **NO building packages** - Packages are ESM source, never built

### Command Usage
- **PREFER Grep tool over grep command** - When searching for patterns in files, use the Grep tool instead of bash `grep`
- **Use the Grep tool for searching** - Don't use `rg` command directly
- **COMMAND PERMISSIONS** - Only use commands that don't require special permissions
- **COMMAND FORMATTING** - Run commands directly, not through shell processes

## Technology Stack Requirements

### Framework & Language
- **Framework**: Next.js 15.4.0 (canary) with React 19.1.0
- **Language**: TypeScript with strict checking
- **Package Manager**: pnpm v10.6.3+ with workspaces
- **Node Version**: 22+ (ESM modules only)

### UI Framework (STRICT)
- **Primary**: Mantine UI v8 - ALWAYS use Mantine as primary UI solution
- **Secondary**: Tailwind CSS v4 (only for specific use cases)
- **Forms**: Mantine form hooks with Zod validation
- **NOT**: react-hook-form, custom form components, or manual validation

### Database & API
- **Database**: PostgreSQL with Prisma ORM
- **API Design**: Server actions over API endpoints
- **Authentication**: Better Auth with organizations
- **Forms**: Server actions for forms and mutations

## Import Rules (CRITICAL)

### Environment-Specific Exports
**In Next.js, ALWAYS use `/next` variants. For edge runtime, use `/edge` variants when available:**

```typescript
// ✅ CORRECT - Next.js server components
import { auth } from '@repo/auth/server/next';

// ✅ CORRECT - Edge runtime (middleware)
import { auth } from '@repo/auth/server/edge';

// ❌ WRONG - Using non-Next.js import in Next.js
import { createAuth } from '@repo/auth/client';

// ❌ WRONG - Using server/next in edge runtime
import { createObservability } from '@repo/observability/server/next'; // In middleware.ts
```

### Standard Import Patterns
```typescript
// Workspace packages
import { ... } from '@repo/package-name';

// App-specific (absolute imports)
import { ... } from '@/components/...';

// External packages
import { ... } from 'external-package';
```

### Package Versions
Always use `"catalog:"` versions in package.json when available:
```json
{
"dependencies": {
"react": "catalog:",
"custom-package": "^1.2.3" // Use specific version if not in catalog
  }
}
```

## Environment Setup (REQUIRED)

### SafeEnv Pattern
**NEVER use `process.env` directly in client components.** Always use the `safeEnv()` pattern:

```typescript
// ❌ WRONG - Direct process.env access in client components
"use client";
const isDev = process.env.NEXT_PUBLIC_NODE_ENV === "development";

// ✅ CORRECT - Use safeEnv pattern
"use client";
import { safeEnv } from "@/env";
const env = safeEnv();
const isDev = env.NEXT_PUBLIC_NODE_ENV === "development";
```

### Required env.ts Structure
```typescript
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";

// Safe environment variable validation that prevents white screens
let env: any = null;
let envError: string | null = null;

try {
  env = createEnv({
    server: { /* server vars */ },
    client: { /* client vars */ },
    runtimeEnv: { /* mappings */ },
    onValidationError: (error) => {
      envError = `Environment validation failed: ${error.message}`;
      throw new Error("Environment validation failed");
    },
  });
} catch (error) {
  envError = error instanceof Error ? error.message : "Unknown environment error";
}

export { env, envError };

// Helper function to safely get environment values
export function safeEnv() {
  if (env) return env;
  // Return safe fallback values
  return { /* fallbacks */ };
}
```

**Pattern Benefits:**
- Prevents white screen crashes from environment issues
- Provides graceful fallbacks for missing variables
- Centralizes environment validation and error handling
- Type-safe environment variable access

## Development Workflow

### Task Management
Use TodoWrite and TodoRead tools for multi-step tasks:
1. Create todo list at start
2. Update status as you progress (pending → in_progress → completed)
3. Ensures all steps are completed

### CLI Usage
- **ESLint**: `eslint . --fix` (the `.` is required)
- **TypeScript**: `tsc --noEmit --emitDeclarationOnly false`
- **Prettier**: Run at repo root with `pnpm prettier`

### Sequential Task Ordering
1. **Check existing** - Search for similar functionality/components
2. **Data layer** - Update schema → `pnpm migrate` → `pnpm --filter @repo/database generate`
3. **Server action** - Create `/app/actions/feature.ts` with Zod validation
4. **UI component** - Use Mantine components, connect to server action
5. **Tests** - Unit tests, component tests with data-testid
6. **Verify** - `pnpm typecheck` → `pnpm lint` → `pnpm test` → commit

### Debugging Build Issues
- Check circular dependencies: `pnpm madge --circular`
- Verify TypeScript: `pnpm typecheck`
- Check package.json exports and import paths
- Ensure packages aren't being built
- Verify all imports use `@repo/`

## Code Style Requirements

### TypeScript
- Always use TypeScript (.ts/.tsx)
- Define proper types (avoid `any`)
- Use `_` prefix for unused variables (e.g., `_error` in catch blocks when not using the error)
- Remove `_` prefix when actually using the variable (e.g., `error` not `_error` when throwing)
- Ensure type accuracy with dependency types
- Run `pnpm typecheck` before committing

### React/Next.js
- React 19.1.0 and Next.js 15.4.0 features
- Server components by default
- Use typed routes with `typedRoutes: true`
- Optimize images with Next.js `Image`
- Server actions for forms and mutations
- Use typed forms with Mantine + Zod
- Prefer server actions over API routes

### Component Structure
- One component per file
- Co-locate related files (styles, tests, types)
- **Use Mantine UI components and hooks**
- Design-system for custom/composite components only

## State Management

### Forms & Validation (REQUIRED)
Always use Mantine forms with Zod:

```typescript
const schema = z.object({
  email: z.string().email(),
  name: z.string().min(2),
});

const form = useForm({
  validate: zodResolver(schema),
  initialValues: { email: '', name: '' },
});
```

### Server Actions (Preferred over API Routes)
```typescript
// app/actions/update-user.ts
'use server';
export async function updateUser(data: FormData) {
  const validated = schema.parse(Object.fromEntries(data));
  // Update logic
}
```

### State Hierarchy
1. **Mantine hooks**: `useForm`, `useDisclosure`, `useToggle`
2. **Server state**: Server actions + React cache
3. **Component state**: `useState`, `useReducer`
4. **Global state** (rare): Zustand or Context

## Testing Requirements

### Framework & Structure
- **Framework**: Vitest for unit/integration tests, Playwright for E2E tests
- **Test Location**:
  - **Preferred**: `__tests__/` directory at package/app root (NOT inside `src/`)
  - **Allowed**: Colocated tests next to components (e.g., `HelloWorld.test.tsx` next to `HelloWorld.tsx`)
  - **E2E Tests**: `__tests__/e2e/` directory for Playwright tests
- **File Naming**:
  - Unit/Integration: `*.test.{ts,tsx}` (Vitest)
  - E2E: `*.spec.ts` (Playwright)
- **Absolute Imports**: Tests support `@/` alias for absolute imports
- **Concurrency**: Tests run in parallel with concurrency=10
- **Data-TestID**: All components include standardized `data-testid` props

```typescript
// Test directory structure
package-or-app/
├── __tests__/              # Tests at root, NOT in src/
│   ├── setup.ts           # Test setup
│   ├── unit/              # Unit tests
│   ├── integration/       # Integration tests
│   └── e2e/              # E2E tests (*.spec.ts)
├── src/
│   └── components/
│       ├── HelloWorld.tsx
│       └── HelloWorld.test.tsx  # Colocated test (optional)
├── vitest.config.ts       # Vitest config
└── playwright.config.ts   # Playwright config (if E2E tests exist)

// Component implementation
interface ComponentProps {
  'data-testid'?: string;
}

const Component = ({ 'data-testid': testId = 'component-name' }) => {
  return <element data-testid={testId} />
}

// Test usage (preferred)
const button = screen.getByTestId('add-to-cart-button');
```

## Git Workflow
- Create feature branches from `master`
- Use conventional commits: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- Run `pnpm lint` and `pnpm typecheck` before committing
- Never commit sensitive data

## Package Architecture

### Package Layers (Strict Dependencies)
Packages follow strict layering to prevent circular dependencies. Each layer can only depend on lower layers:

1. **Layer 1: Foundation** - `@repo/typescript-config`, `@repo/eslint-config`, `@repo/next-config`
2. **Layer 2: Core Services** - `@repo/qa`, `@repo/security`, `@repo/observability`
3. **Layer 3: Data** - `@repo/database`
4. **Layer 4: Business Services** - `@repo/analytics`, `@repo/email`, `@repo/notifications`
5. **Layer 5: Business Logic** - `@repo/auth`, `@repo/payments`, `@repo/orchestration`, `@repo/seo`, `@repo/internationalization`
6. **Layer 5.5: Specialized** - `@repo/ai`, `@repo/scraping`, `@repo/storage`
7. **Layer 6: UI** - `@repo/design-system`
8. **Layer 7: Applications** - End-user applications

### Module System
- **ESM modules only** - No CommonJS support
- **Packages** (`/packages/*`) MUST have `"type": "module"`
- **Apps** (`/apps/*`) should NOT have `"type": "module"` (Next.js handles ESM)
- Packages are consumed directly from source (no build step)
- All imports use `@repo/*` namespace

## Configuration Standards

### Package Dependencies
- Use `"catalog:"` versions when available

### TypeScript
- Extend `@repo/typescript-config/[base|nextjs|react-library].json`

### ESLint
- Extend `@repo/eslint-config/[base|next|react-internal|react-library]`

### Next.js
- Import and use `@repo/next-config`

### Vitest
- Extend `@repo/qa/config/[node|react|next]`

## UI Framework Guidelines

### Mantine UI v8 (Primary)
Always use Mantine as primary UI solution:
- Import directly: `import { Button } from '@mantine/core'`
- Use Mantine hooks exclusively (`useForm`, `useDisclosure`, etc.)
- Prefer Mantine style props over Tailwind classes
- Dark mode via `useMantineColorScheme` or `dark` prop
- Responsive props: `{ base: value, sm: value, md: value }`
- Notifications: `@repo/notifications/mantine-notifications`

### Tailwind CSS v4 (Secondary)
- Valid for specific use cases or existing code
- Can complement Mantine when needed
- v4 only (not v3)

## Internationalization
Use `@repo/internationalization` package with concise property names (e.g., `l` for languages).
Standard locale codes: `en`, `fr`, `es`, `pt`, `de`. See package docs for implementation details.

## Vercel Toolbar & Feature Flags
Available in development mode for apps with PostHog integration. Toggle feature flags in real-time via toolbar. See `/apps/ai-chatbot/src/lib/flags.ts` for implementation examples.

## Port Assignments

| Application                 | Port | Description                   |
| --------------------------- | ---- | ----------------------------- |
| `/apps/email`               | 3500 | Email preview                 |
| `/apps/studio`              | 3600 | Prisma Studio                 |
| `/apps/storybook`           | 3700 | Component docs                |
| `/apps/docs`                | 3800 | Mintlify docs                 |

## Essential Commands

```bash
# Setup
pnpm install                        # Install dependencies
pnpm doppler:pull:all              # Download secrets to .env.local files

# Development (NEVER run these directly - user only)
pnpm dev                           # Run all apps
pnpm dev --filter=app              # Run specific app

# Building
pnpm build                         # Production build with Doppler
pnpm build:local                   # Local build with .env.local
pnpm build --filter=app            # Build specific app

# Testing
pnpm test                          # Run all tests
pnpm test --filter=app             # Test specific app
pnpm test -- --watch               # Watch mode

# Code Quality
pnpm typecheck                     # TypeScript checking
pnpm lint                          # ESLint and Prettier
pnpm madge --circular              # Check circular dependencies

# Database
pnpm migrate                       # Run Prisma migrations
pnpm studio                        # Open Prisma Studio (port 3600)
pnpm --filter @repo/database generate  # Regenerate Prisma client

# Maintenance
pnpm clean                         # Clean build artifacts
pnpm bump-deps                     # Update dependencies
```

## Anti-Patterns to Avoid

### Environment Variable Errors
- ❌ `process.env.NEXT_PUBLIC_NODE_ENV` in client components → ✅ `safeEnv().NEXT_PUBLIC_NODE_ENV`
- ❌ Direct `process.env` access in "use client" files → ✅ Import and use `safeEnv()` from `@/env`
- ❌ No fallback for missing env vars → ✅ Graceful fallbacks in `safeEnv()` function
- ❌ Environment crashes causing white screens → ✅ Error handling with `envError` export
- ❌ Missing `env.ts` files in Next.js apps → ✅ Always include `env.ts` with safeEnv pattern

### Import & Export Errors
- ❌ `import from '@repo/package/src/file'` → ✅ `import from '@repo/package'`
- ❌ `import from './file.js'` → ✅ `import from './file'`
- ❌ Using `/client` in Next.js → ✅ Always use `/client/next` in Next.js apps
- ❌ Using `/server/next` in edge runtime → ✅ Always use `/server/edge` in middleware/edge functions
- ❌ `import { Button } from '@repo/design-system'` → ✅ `import { Button } from '@mantine/core'`
- ❌ Deep imports like `@repo/auth/src/lib/utils` → ✅ Export from package root

### Edge Runtime Errors
- ❌ `@opentelemetry/api` in middleware → ✅ Use `/server/edge` exports (HTTP-based observability)
- ❌ Node.js APIs in edge runtime → ✅ Use Web APIs (fetch, crypto.randomUUID, etc.)
- ❌ Native modules in edge runtime → ✅ Use edge-compatible implementations
- ❌ `fs`, `path`, `crypto` in middleware → ✅ Use edge-compatible alternatives
- ❌ Heavy libraries in edge → ✅ Lightweight, fetch-based implementations

### Configuration Mistakes
- ❌ `src/env.ts` → ✅ `env.ts` in package root
- ❌ Building packages → ✅ Packages are ESM source, never built
- ❌ Guessing versions → ✅ Use `"catalog:"` when available
- ❌ Missing `"type": "module"` in packages → ✅ Always add for packages
- ❌ Adding `"type": "module"` to apps → ✅ Next.js apps don't need it

### Development Patterns
- ❌ `react-hook-form` → ✅ `@mantine/form` with Zod
- ❌ `/app/api/*/route.ts` → ✅ `/app/actions/*.ts` server actions
- ❌ `useEffect` + `fetch` → ✅ Server components or actions
- ❌ `localStorage` in artifacts → ✅ React state or variables
- ❌ Manual form validation → ✅ Zod schemas with Mantine forms
- ❌ `useState` for forms → ✅ `useForm` from Mantine

### File Organization
- ❌ Creating `/lib` or `/utils` → ✅ Use existing packages or create new package
- ❌ Business logic in components → ✅ Server actions for data operations
- ❌ Shared code in app folders → ✅ Extract to packages
- ❌ `/pages` directory → ✅ `/app` directory (App Router)
- ❌ `getServerSideProps` → ✅ Server components or server actions

### Database & Schema
- ❌ Raw SQL queries → ✅ Prisma ORM methods
- ❌ Manual type definitions → ✅ Generated Prisma types
- ❌ Forgetting to regenerate → ✅ Always run generate after schema changes
- ❌ Direct database calls in components → ✅ Server actions only
- ❌ Client-side database imports → ✅ Database only in server code

### Testing Patterns
- ❌ `data-cy` or custom attributes → ✅ Always use `data-testid`
- ❌ Testing implementation details → ✅ Test user interactions
- ❌ Separate test files → ✅ Co-locate in `__tests__` directories
- ❌ `jest` imports → ✅ Use `vitest` imports
- ❌ Manual mocking → ✅ Use Vitest's auto-mocking features

### State Management
- ❌ Redux for everything → ✅ Server state + Mantine hooks first
- ❌ Global state by default → ✅ Component state, then server state
- ❌ Complex state machines → ✅ Server actions + optimistic updates
- ❌ Client-side caching → ✅ Next.js caching + server components
- ❌ Manual loading states → ✅ Suspense boundaries

### Authentication Patterns
- ❌ Custom auth implementation → ✅ Use `@repo/auth` (Better Auth)
- ❌ JWT in localStorage → ✅ Secure httpOnly cookies via Better Auth
- ❌ Client-side auth checks → ✅ Server-side via `auth()` function
- ❌ Manual session handling → ✅ Better Auth handles it
- ❌ Forgetting auth checks → ✅ Always check in server actions

### UI/UX Patterns
- ❌ Custom CSS files → ✅ Mantine style props first
- ❌ Tailwind for everything → ✅ Mantine components + minimal Tailwind
- ❌ Custom form components → ✅ Mantine form components
- ❌ Manual dark mode → ✅ `useMantineColorScheme`
- ❌ Custom notification system → ✅ `@repo/notifications`

### Performance Anti-Patterns
- ❌ Client components by default → ✅ Server components by default
- ❌ Fetching in useEffect → ✅ Fetch in server components
- ❌ Large client bundles → ✅ Dynamic imports + server components
- ❌ Unoptimized images → ✅ Next.js Image component
- ❌ Runtime config → ✅ Build-time environment validation

### Common Issues & Solutions
1. **Module not found**: Ensure `"type": "module"` in packages
2. **Type errors**: Run `pnpm typecheck`, regenerate Prisma client
3. **Auth issues**: Verify environment variables
4. **Build failures**: Check circular dependencies with `pnpm madge --circular`
5. **Forms**: Always use Mantine's `useForm` hook with Zod

## Quick Package Reference

| Package               | Purpose               | Edge Support | Key Import                 |
| --------------------- | --------------------- | ------------ | -------------------------- |
| `@repo/auth`          | Better Auth           | ✅           | `auth` from `/server/next` |
| `@repo/database`      | Prisma ORM            | ❌           | `import { db }`            |
| `@repo/analytics`     | PostHog/GA            | ✅           | Feature flags included     |
| `@repo/observability` | Sentry                | ✅           | Different for edge/server  |
| `@repo/notifications` | Mantine notifications | ✅           | `/mantine-notifications`   |

> **Rule**: Always use `/next` variants in Next.js apps, `/edge` in middleware

## Documentation
**IMPORTANT**: The source of truth for all documentation is located in `/apps/docs/` (Mintlify). This is the authoritative documentation source for the entire project. Always refer to and update documentation in this location.

## AI-Optimized Guidance
For detailed guidance on common development tasks, see the AI-specific documentation in `/apps/docs/ai-hints/`:
- **Task Templates** - Ready-to-use code templates
- **Decision Trees** - Flowcharts for technical decisions
- **Command Sequences** - Step-by-step workflows
- **Success Markers** - Task completion checklists
- **Package Hints** - Package-specific guidance