// auth.prisma - Authentication and User Management Models

//==============================================================================
// USER & AUTHENTICATION MODELS
//==============================================================================

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  phoneNumber   String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?

  // Soft delete support
  deletedAt DateTime?

  // Author information from e-commerce schema
  bio              String?   @db.Text // Author biography text
  expertise        String[] // Areas of expertise
  isVerifiedAuthor Boolean   @default(false) // Whether this is a verified expert/author
  authorSince      DateTime? // When the user became an author

  // User preferences and settings
  preferences Json? @db.JsonB // Flexible storage for user preferences

  // Account status
  isSuspended       Boolean @default(false) // Whether the user is currently suspended
  suspensionDetails Json? @db.JsonB // Details about the suspension (reason, duration, etc.)

  // Authentication relationships
  sessions  Session[]
  accounts  Account[]
  members   Member[]
  apiKeys   ApiKey[]
  twoFactor TwoFactor?
  passkeys  Passkey[]

  // Invitation relationships
  invitationsSent Invitation[] @relation("InvitedBy")
  teamMemberships TeamMember[] @relation("TeamMemberships")

  @@unique([email])
  @@index([email])
  @@index([role, banned]) // For admin filtering
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  impersonatedBy       String? // ID of the admin impersonating this session
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([userId, activeOrganizationId])
  @@index([impersonatedBy])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
  @@map("verification")
}

//==============================================================================
// ORGANIZATION & TEAM MODELS
//==============================================================================

model Organization {
  id          String       @id
  name        String
  slug        String       @unique
  logo        String?
  description String?
  metadata    Json? @db.JsonB
  createdAt   DateTime
  updatedAt   DateTime?
  members     Member[]
  teams       Team[]
  invitations Invitation[]

  @@index([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  userId         String
  organizationId String
  role           String
  createdAt      DateTime
  updatedAt      DateTime?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("member")
}

model Team {
  id             String       @id
  name           String
  description    String?
  organizationId String
  createdAt      DateTime
  updatedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitations    Invitation[]
  teamMembers    TeamMember[]

  @@index([organizationId])
  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("TeamMemberships", fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("team_member")
}

model Invitation {
  id             String       @id
  email          String
  invitedById    String?
  organizationId String
  role           String
  teamId         String?
  status         String
  expiresAt      DateTime
  createdAt      DateTime
  updatedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team           Team?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
  invitedBy      User?        @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([organizationId])
  @@index([teamId])
  @@index([invitedById])
  @@map("invitation")
}

//==============================================================================
// SECURITY & API MODELS
//==============================================================================

model ApiKey {
  id                  String    @id
  name                String    @db.VarChar(100)
  start               String?   @db.VarChar(16)
  prefix              String?   @db.VarChar(12)
  key                 String    @unique
  keyHash             String? // Hash of the key for security
  userId              String
  organizationId      String?
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  lastUsedAt          DateTime?
  enabled             Boolean   @default(true)
  rateLimitEnabled    Boolean   @default(true)
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int       @default(0)
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?   @db.Text
  metadata            Json? @db.JsonB
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([key])
  @@index([keyHash])
  @@map("apikey")
}

model TwoFactor {
  id          String       @id
  userId      String       @unique
  secret      String       @db.Text // Consider encryption at application level
  secretHash  String? // Hash for verification without exposing secret
  enabled     Boolean      @default(false)
  verified    Boolean      @default(false)
  createdAt   DateTime
  updatedAt   DateTime
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  backupCodes BackupCode[]

  @@index([userId])
  @@map("twofactor")
}

model BackupCode {
  id          String    @id
  code        String    @db.Text // Consider encryption
  codeHash    String // Hash for verification
  userId      String
  twoFactorId String
  used        Boolean   @default(false)
  usedAt      DateTime?
  createdAt   DateTime
  twoFactor   TwoFactor @relation(fields: [twoFactorId], references: [id], onDelete: Cascade)

  @@unique([codeHash, userId])
  @@index([userId])
  @@index([twoFactorId])
  @@map("backupcode")
}

model Passkey {
  id           String    @id
  name         String?
  userId       String
  credentialId String    @unique
  publicKey    String    @db.Text
  counter      Int // Changed from BigInt for JS compatibility
  deviceType   String
  backedUp     Boolean
  transports   String[]  @default([])
  createdAt    DateTime
  updatedAt    DateTime
  lastUsedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialId])
  @@map("passkey")
}

//==============================================================================
// AUDIT LOGGING MODEL
//==============================================================================

model AuditLog {
  id           String   @id @default(cuid())
  type         String // Event type (e.g., auth.sign_in, password.changed)
  action       String // Specific action taken
  userId       String? // User who performed the action (if authenticated)
  email        String? // Email associated with the action
  ipAddress    String? // IP address of the request
  userAgent    String? // User agent string
  metadata     Json? @db.JsonB // Additional event-specific data
  success      Boolean // Whether the action was successful
  errorMessage String? // Error message if action failed
  timestamp    DateTime @default(now())

  // Indexes for efficient querying
  @@index([userId])
  @@index([email])
  @@index([type])
  @@index([timestamp])
  @@map("audit_logs")
}
