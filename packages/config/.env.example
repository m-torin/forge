# Config Package Environment Variables
# Copy relevant variables to your app's .env.local file

# =============================================================================
# APPLICATION URLS (Required in Production)
# =============================================================================

# Main application URL (required in production)
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Website/marketing URL (required in production)
NEXT_PUBLIC_WEB_URL=http://localhost:3200

# =============================================================================
# OPTIONAL URLS
# =============================================================================

# API endpoint URL (optional)
NEXT_PUBLIC_API_URL=http://localhost:3000/api

# Documentation URL (optional)
NEXT_PUBLIC_DOCS_URL=http://localhost:3800

# =============================================================================
# BUILD CONFIGURATION (Optional)
# =============================================================================

# Enable bundle analyzer (optional)
ANALYZE=false

# Next.js runtime environment (automatically set)
NEXT_RUNTIME=nodejs

# =============================================================================
# VERCEL CONFIGURATION (Automatically Set)
# =============================================================================

# Vercel environment variables (automatically provided by Vercel)
# VERCEL_URL - Deployment URL
# VERCEL_ENV - Environment (development, preview, production)
# VERCEL_REGION - Deployment region

# =============================================================================
# ENVIRONMENT DETECTION
# =============================================================================

# Node environment (automatically set)
NODE_ENV=development

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Core Configuration:
#    This package provides foundational environment variable schemas
#    that other packages extend from. It ensures consistent URL
#    configuration across all applications in the monorepo.

# 2. Required vs Optional Variables:
#    Required in Production:
#    - NEXT_PUBLIC_APP_URL: Main application domain
#    - NEXT_PUBLIC_WEB_URL: Marketing/website domain
#    
#    Optional (all environments):
#    - NEXT_PUBLIC_API_URL: Separate API endpoint
#    - NEXT_PUBLIC_DOCS_URL: Documentation site
#    - ANALYZE: Bundle analysis flag

# 3. URL Patterns:
#    Development URLs:
#    - http://localhost:3000 (main app)
#    - http://localhost:3200 (marketing)
#    - http://localhost:3800 (docs)
#    
#    Production URLs:
#    - https://app.yourdomain.com (main app)
#    - https://yourdomain.com (marketing)
#    - https://docs.yourdomain.com (docs)

# 4. Monorepo Architecture:
#    This config package is extended by:
#    - All applications (web, backstage, etc.)
#    - Other packages that need URL configuration
#    - Ensures consistent environment validation

# 5. Vercel Integration:
#    - Automatically detects Vercel environment
#    - Provides deployment URL variables
#    - Handles preview/production URL routing
#    - Includes region and runtime detection

# 6. Bundle Analysis:
#    - Set ANALYZE=true to enable webpack-bundle-analyzer
#    - Helps identify bundle size issues
#    - Use during development for optimization
#    - Example: ANALYZE=true pnpm build

# 7. Next.js Runtime:
#    - NEXT_RUNTIME is automatically set by Next.js
#    - Values: 'nodejs' (default) or 'edge'
#    - Affects available APIs and capabilities
#    - Used for edge runtime optimization

# 8. Environment Validation:
#    - Strict validation in production
#    - Flexible validation in development
#    - Uses @t3-oss/env-nextjs for type safety
#    - Fails fast on misconfiguration

# 9. Usage in Applications:
#    ```typescript
#    import { keys } from '@repo/config/next/keys';
#    
#    const env = createEnv({
#      extends: [keys()],
#      // Add app-specific variables
#    });
#    ```

# 10. Best Practices:
#     - Use absolute URLs in production
#     - Keep development URLs consistent across team
#     - Set up proper DNS for production domains
#     - Use environment-specific configurations
#     - Monitor URL accessibility and SSL certificates