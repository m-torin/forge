# Kubernetes deployment for AI Agent Platform
apiVersion: v1
kind: Namespace
metadata:
  name: ai-agent-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-agent-platform
  namespace: ai-agent-platform
  labels:
    app: ai-agent-platform
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-agent-platform
  template:
    metadata:
      labels:
        app: ai-agent-platform
        version: v1
    spec:
      serviceAccountName: ai-agent-platform
      containers:
        - name: ai-agent-platform
          image: ai-agent-platform:latest
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: NODE_ENV
              value: production
            - name: PORT
              value: '3000'
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: ai-agent-config
                  key: redis-url
            - name: POSTGRES_URL
              valueFrom:
                secretKeyRef:
                  name: ai-agent-secrets
                  key: postgres-url
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: ai-agent-secrets
                  key: openai-api-key
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: ai-agent-secrets
                  key: anthropic-api-key
            - name: MONITORING_ENABLED
              value: 'true'
            - name: AUTO_SCALING_ENABLED
              value: 'true'
          resources:
            requests:
              memory: '1Gi'
              cpu: '500m'
            limits:
              memory: '4Gi'
              cpu: '2000m'
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: agent-logs
              mountPath: /app/logs
            - name: temp-storage
              mountPath: /app/temp
      volumes:
        - name: agent-logs
          persistentVolumeClaim:
            claimName: agent-logs-pvc
        - name: temp-storage
          emptyDir:
            sizeLimit: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ai-agent-platform-service
  namespace: ai-agent-platform
  labels:
    app: ai-agent-platform
spec:
  selector:
    app: ai-agent-platform
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-agent-platform
  namespace: ai-agent-platform
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-agent-config
  namespace: ai-agent-platform
data:
  redis-url: 'redis://redis-service:6379'
  max-support-agents: '20'
  max-specialist-agents: '10'
  auto-scaling-enabled: 'true'
  monitoring-enabled: 'true'
  log-level: 'info'
  metrics-interval: '60000'
  health-check-interval: '30000'
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-agent-secrets
  namespace: ai-agent-platform
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  postgres-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAcG9zdGdyZXM6NTQzMi9haV9hZ2VudHM=
  openai-api-key: c2stZXhhbXBsZS1vcGVuYWkta2V5
  anthropic-api-key: c2stZXhhbXBsZS1hbnRocm9waWMta2V5
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agent-logs-pvc
  namespace: ai-agent-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-agent-platform-hpa
  namespace: ai-agent-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-agent-platform
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-agent-platform-ingress
  namespace: ai-agent-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: '100'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'
spec:
  tls:
    - hosts:
        - ai-agent-platform.example.com
      secretName: ai-agent-platform-tls
  rules:
    - host: ai-agent-platform.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ai-agent-platform-service
                port:
                  number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-agent-platform-pdb
  namespace: ai-agent-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ai-agent-platform
---
apiVersion: v1
kind: NetworkPolicy
metadata:
  name: ai-agent-platform-netpol
  namespace: ai-agent-platform
spec:
  podSelector:
    matchLabels:
      app: ai-agent-platform
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - namespaceSelector:
            matchLabels:
              name: cache
      ports:
        - protocol: TCP
          port: 6379
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
