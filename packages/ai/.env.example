# AI Package Environment Variables
# Copy relevant variables to your app's .env.local file

# =============================================================================
# AI SERVICE API KEYS (Choose one or more)
# =============================================================================

# Anthropic Claude API (recommended for advanced reasoning)
# Get from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# OpenAI API (GPT-3.5, GPT-4, embeddings)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# Google AI API (Gemini, PaLM)
# Get from: https://ai.google.dev/
GOOGLE_AI_API_KEY=your-google-ai-api-key-here

# =============================================================================
# AI CONFIGURATION (Optional)
# =============================================================================

# Default AI provider (anthropic, openai, google)
DEFAULT_AI_PROVIDER=anthropic

# Default model configurations
ANTHROPIC_MODEL=claude-3-sonnet-20240229
OPENAI_MODEL=gpt-4
GOOGLE_MODEL=gemini-pro

# =============================================================================
# FEATURE CONFIGURATION (Optional)
# =============================================================================

# Enable/disable AI features
ENABLE_AI_CHAT=true
ENABLE_AI_CLASSIFICATION=true
ENABLE_AI_MODERATION=true
ENABLE_AI_SENTIMENT=true
ENABLE_AI_EXTRACTION=true

# =============================================================================
# RATE LIMITING (Optional)
# =============================================================================

# AI API rate limits (requests per minute)
AI_RATE_LIMIT_RPM=60
AI_CLASSIFICATION_RATE_LIMIT=30
AI_CHAT_RATE_LIMIT=20

# =============================================================================
# CLASSIFICATION CONFIGURATION (Optional)
# =============================================================================

# Product classification settings
CLASSIFICATION_CONFIDENCE_THRESHOLD=0.8
CLASSIFICATION_MAX_CATEGORIES=5
CLASSIFICATION_BATCH_SIZE=10

# Training data storage
CLASSIFICATION_TRAINING_STORAGE=memory

# =============================================================================
# MODERATION CONFIGURATION (Optional)
# =============================================================================

# Content moderation settings
MODERATION_ENABLED=true
MODERATION_THRESHOLD=0.7
MODERATION_AUTO_REJECT=false

# =============================================================================
# CHAT CONFIGURATION (Optional)
# =============================================================================

# Chat AI settings
CHAT_MAX_TOKENS=2048
CHAT_TEMPERATURE=0.7
CHAT_SYSTEM_PROMPT="You are a helpful assistant."

# Chat history settings
CHAT_HISTORY_LIMIT=50
CHAT_CONTEXT_WINDOW=4000

# =============================================================================
# CACHING CONFIGURATION (Optional)
# =============================================================================

# AI response caching
AI_CACHE_ENABLED=true
AI_CACHE_TTL=3600

# Cache provider (memory, redis)
AI_CACHE_PROVIDER=memory

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Anthropic Setup:
#    - Create account at https://console.anthropic.com/
#    - Generate API key in Account Settings
#    - API key format: sk-ant-...
#    - Best for: Advanced reasoning, analysis, code generation

# 2. OpenAI Setup:
#    - Create account at https://platform.openai.com/
#    - Generate API key in API section
#    - API key format: sk-...
#    - Best for: General AI tasks, embeddings, image generation

# 3. Google AI Setup:
#    - Create project at https://ai.google.dev/
#    - Enable AI APIs and generate key
#    - Best for: Multimodal tasks, fast inference

# 4. Provider Selection:
#    Choose based on your needs:
#    - Anthropic Claude: Best reasoning, safety, longer context
#    - OpenAI GPT: Broad ecosystem, many models, good docs
#    - Google Gemini: Fast, multimodal, good for embeddings

# 5. Rate Limiting:
#    - Each provider has different limits
#    - Monitor usage in provider dashboards
#    - Implement proper error handling for rate limits
#    - Consider caching responses to reduce API calls

# 6. Security Best Practices:
#    - Never expose API keys in client-side code
#    - Use environment variables for API keys
#    - Implement proper input validation
#    - Monitor for unusual usage patterns
#    - Rotate API keys regularly

# 7. Cost Management:
#    - Set billing alerts in provider dashboards
#    - Monitor token usage
#    - Use appropriate models for tasks (cheaper models for simple tasks)
#    - Implement caching to reduce redundant calls
#    - Set rate limits to prevent runaway costs

# 8. Feature Usage:
#    - Classification: Product categorization, content tagging
#    - Moderation: Content safety, spam detection
#    - Sentiment: Customer feedback analysis
#    - Extraction: Data extraction from text
#    - Chat: Customer support, assistants

# 9. Model Selection:
#    - Claude Sonnet: Balanced performance and cost
#    - Claude Opus: Highest capability, highest cost
#    - GPT-3.5 Turbo: Fast and cheap for simple tasks
#    - GPT-4: High capability for complex reasoning
#    - Gemini Pro: Good balance of speed and capability