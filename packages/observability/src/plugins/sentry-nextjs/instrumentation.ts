/**
 * Instrumentation utilities for Next.js Sentry integration
 * Helps generate and configure instrumentation.ts files
 */

/**
 * Configuration options for instrumentation generation
 */
export interface InstrumentationConfig {
  /**
   * Enable production-only mode
   * @default true
   */
  productionOnly?: boolean;

  /**
   * Include preview environments
   * @default true
   */
  includePreview?: boolean;

  /**
   * Custom initialization code to add
   */
  customInitCode?: string;

  /**
   * Custom error handler code
   */
  customErrorHandler?: string;

  /**
   * Enable verbose logging
   * @default false
   */
  verbose?: boolean;

  /**
   * Enable App Router metadata integration
   * @default true
   */
  enableAppRouterMetadata?: boolean;

  /**
   * Enable router transition capture
   * @default true
   */
  enableRouterTransitionCapture?: boolean;

  /**
   * Feature flag configuration
   */
  featureFlags?: {
    provider?: "launchdarkly" | "unleash";
    config?: any;
  };
}

/**
 * Generate instrumentation.ts content
 */
export function createInstrumentation(
  config: InstrumentationConfig = {},
): string {
  const {
    productionOnly = true,
    includePreview = true,
    customInitCode = "",
    customErrorHandler: _customErrorHandler = "",
    verbose = false,
  } = config;

  const productionCheck = productionOnly
    ? includePreview
      ? `process.env.NODE_ENV === 'production' || process.env.VERCEL_ENV === 'preview'`
      : `process.env.NODE_ENV === 'production'`
    : "true";

  return `/**
 * Next.js instrumentation file
 * Auto-generated by @repo/observability
 * 
 * This file initializes observability for all Next.js runtimes
 */

export async function register() {
  // Only initialize observability in production environments
  // This prevents OpenTelemetry webpack warnings in development
  if (${productionCheck}) {
    if (process.env.NEXT_RUNTIME === 'nodejs') {
      // Initialize observability for server-side Node.js runtime
      const { getObservability } = await import('@repo/observability/server/next');
      ${verbose ? "console.log('[Observability] Initializing for Node.js runtime');" : ""}
      await getObservability();
    }

    if (process.env.NEXT_RUNTIME === 'edge') {
      // Initialize observability for edge runtime
      const { getObservability } = await import('@repo/observability/server/edge');
      ${verbose ? "console.log('[Observability] Initializing for Edge runtime');" : ""}
      await getObservability();
    }

    ${customInitCode ? `// Custom initialization code\n    ${customInitCode}` : ""}
  }${
    verbose
      ? ` else {
    console.log('[Observability] Skipping initialization in development');
  }`
      : ""
  }
}

// Export onRequestError hook
export { captureRequestError as onRequestError } from '@sentry/nextjs';
`;
}

/**
 * Generate client-side instrumentation content
 */
export interface ClientInstrumentationConfig extends InstrumentationConfig {
  /**
   * Trace propagation targets for client-side tracing
   */
  tracePropagationTargets?: (string | RegExp)[];
  /**
   * Session replay options
   */
  replayOptions?: {
    maskAllText?: boolean;
    blockAllMedia?: boolean;
  };
}

export function createClientInstrumentation(
  config: ClientInstrumentationConfig = {},
): string {
  const {
    customInitCode = "",
    verbose = false,
    enableRouterTransitionCapture = true,
    featureFlags,
    tracePropagationTargets,
    replayOptions,
  } = config;

  const featureFlagImports = featureFlags
    ? generateFeatureFlagImports(featureFlags)
    : "";
  const featureFlagInit = featureFlags
    ? generateFeatureFlagInit(featureFlags)
    : "";

  // Format trace propagation targets for template literal
  const formattedTargets = tracePropagationTargets
    ? JSON.stringify(tracePropagationTargets, null, 8)
        .replace(/"([^"]+)"/g, "'$1'")
        .replace(/"\\\/([^"]+)\\\/"/g, "/$1/")
    : `[
        'localhost',
        /^https:\\/\\/yourserver\\//,
        // Add your application domains here
      ]`;

  const formattedReplayOptions = replayOptions
    ? JSON.stringify(replayOptions, null, 6)
    : `{
      maskAllText: false,
      blockAllMedia: false,
    }`;

  return `/**
 * Client-side instrumentation file
 * Auto-generated by @repo/observability
 * 
 * This file initializes client-side observability
 */

import * as Sentry from '@sentry/nextjs';
import { env } from '@repo/observability/plugins/sentry-nextjs/env';
${featureFlagImports}

// Initialize Sentry for client-side
Sentry.init({
  dsn: env.NEXT_PUBLIC_SENTRY_DSN,
  environment: env.NEXT_PUBLIC_SENTRY_ENVIRONMENT || process.env.NODE_ENV,
  
  // Performance monitoring
  integrations: [
    // Browser tracing integration for performance monitoring
    Sentry.browserTracingIntegration({
      tracePropagationTargets: ${formattedTargets},
    }),
    // Session replay integration
    Sentry.replayIntegration(${formattedReplayOptions}),
    // Canvas recording for replay
    Sentry.replayCanvasIntegration(),
    // User feedback integration (configure via environment variables)
    Sentry.feedbackIntegration({
      colorScheme: 'system',
      autoInject: true,
    }),
    // Additional integrations based on configuration
    ...(env.NEXT_PUBLIC_SENTRY_ENABLE_HTTP_CLIENT ? [Sentry.httpClientIntegration()] : []),
    ...(env.NEXT_PUBLIC_SENTRY_ENABLE_CONTEXT_LINES ? [Sentry.contextLinesIntegration()] : []),
    ...(env.NEXT_PUBLIC_SENTRY_ENABLE_REPORTING_OBSERVER ? [Sentry.reportingObserverIntegration()] : []),
  ],
  
  // Sampling rates (configure via environment variables)
  tracesSampleRate: env.NEXT_PUBLIC_SENTRY_TRACES_SAMPLE_RATE || 1.0,
  replaysSessionSampleRate: env.NEXT_PUBLIC_SENTRY_REPLAYS_SESSION_SAMPLE_RATE || 0.1,
  replaysOnErrorSampleRate: env.NEXT_PUBLIC_SENTRY_REPLAYS_ON_ERROR_SAMPLE_RATE || 1.0,
  
  // Enable experimental logs (configure via environment variables)
  _experiments: { 
    enableLogs: env.NEXT_PUBLIC_SENTRY_ENABLE_LOGS ?? true 
  },
  
  ${customInitCode ? `// Custom configuration\n  ${customInitCode}` : ""}
});

${verbose ? "console.log('[Observability] Client-side Sentry initialized');" : ""}

${featureFlagInit}

${
  enableRouterTransitionCapture
    ? `// Export router transition capture for Next.js
export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;`
    : ""
}
`;
}

/**
 * Generate feature flag imports
 */
function generateFeatureFlagImports(
  featureFlags: NonNullable<InstrumentationConfig["featureFlags"]>,
): string {
  switch (featureFlags.provider) {
    case "launchdarkly":
      return `import * as LaunchDarkly from 'launchdarkly-js-client-sdk';`;
    case "unleash":
      return `import { UnleashClient } from 'unleash-proxy-client';`;
    default:
      return "";
  }
}

/**
 * Generate feature flag initialization code
 */
function generateFeatureFlagInit(
  featureFlags: NonNullable<InstrumentationConfig["featureFlags"]>,
): string {
  switch (featureFlags.provider) {
    case "launchdarkly":
      return `
// Initialize LaunchDarkly
const ldClient = LaunchDarkly.initialize(
  env.NEXT_PUBLIC_LAUNCHDARKLY_CLIENT_ID || '${featureFlags.config?.clientId || ""}',
  { kind: 'user', key: 'anonymous' },
  { 
    streaming: true,
    useReport: true,
    inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()] 
  }
);
`;
    case "unleash":
      return `
// Initialize Unleash
const unleash = new UnleashClient({
  url: env.NEXT_PUBLIC_UNLEASH_URL || '${featureFlags.config?.url || ""}',
  clientKey: env.NEXT_PUBLIC_UNLEASH_CLIENT_KEY || '${featureFlags.config?.clientKey || ""}',
  appName: env.NEXT_PUBLIC_UNLEASH_APP_NAME || '${featureFlags.config?.appName || "nextjs-app"}',
});
unleash.start();
`;
    default:
      return "";
  }
}

/**
 * Generate server-side instrumentation content
 */
export function createServerInstrumentation(
  config: InstrumentationConfig = {},
): string {
  const {
    customInitCode = "",
    verbose = false,
    enableAppRouterMetadata = true,
  } = config;

  return `/**
 * Server-side instrumentation file
 * Auto-generated by @repo/observability
 * 
 * This file initializes server-side observability
 */

import * as Sentry from '@sentry/nextjs';
import { env } from '@repo/observability/plugins/sentry-nextjs/env';

// Initialize Sentry for server-side
Sentry.init({
  dsn: env.SENTRY_DSN || env.NEXT_PUBLIC_SENTRY_DSN,
  environment: env.SENTRY_ENVIRONMENT || process.env.NODE_ENV,
  release: env.SENTRY_RELEASE,
  
  // Server-specific options
  sendDefaultPii: env.SENTRY_SEND_DEFAULT_PII ?? true,
  
  // Performance monitoring
  tracesSampleRate: env.SENTRY_TRACES_SAMPLE_RATE || 1.0,
  profilesSampleRate: env.SENTRY_PROFILES_SAMPLE_RATE || 0,
  
  // Server integrations
  integrations: [
    // Profiling integration (requires profilesSampleRate > 0)
    ...(env.SENTRY_PROFILES_SAMPLE_RATE > 0 ? [Sentry.profilesIntegration()] : []),
    // Context lines for better error context
    ...(env.SENTRY_ENABLE_CONTEXT_LINES ? [Sentry.contextLinesIntegration()] : []),
    // Extra error data
    ...(env.SENTRY_ENABLE_EXTRA_ERROR_DATA ? [Sentry.extraErrorDataIntegration({
      depth: 5,
    })] : []),
    // Session timing
    ...(env.SENTRY_ENABLE_SESSION_TIMING ? [Sentry.sessionTimingIntegration()] : []),
  ],
  
  // Enable experimental logs (configure via environment variables)
  _experiments: { 
    enableLogs: env.SENTRY_ENABLE_LOGS ?? true 
  },
  
  ${customInitCode ? `// Custom configuration\n  ${customInitCode}` : ""}
});

${verbose ? "console.log('[Observability] Server-side Sentry initialized');" : ""}

${
  enableAppRouterMetadata
    ? `// Export helper for App Router metadata integration
export const getTraceData = Sentry.getTraceData;`
    : ""
}

// Export onRequestError hook for Next.js instrumentation
export { captureRequestError as onRequestError } from '@sentry/nextjs';
`;
}

/**
 * Generate edge runtime instrumentation content
 */
export function createEdgeInstrumentation(
  config: InstrumentationConfig = {},
): string {
  const { customInitCode = "", verbose = false } = config;

  return `/**
 * Edge runtime instrumentation file
 * Auto-generated by @repo/observability
 * 
 * This file initializes edge runtime observability
 */

import * as Sentry from '@sentry/nextjs';
import { env } from '@repo/observability/plugins/sentry-nextjs/env';

// Initialize Sentry for edge runtime
Sentry.init({
  dsn: env.SENTRY_DSN || env.NEXT_PUBLIC_SENTRY_DSN,
  environment: env.SENTRY_ENVIRONMENT || env.NEXT_PUBLIC_SENTRY_ENVIRONMENT || process.env.NODE_ENV,
  release: env.SENTRY_RELEASE,
  
  // Edge-specific configuration
  // Note: Some features may be limited in edge runtime
  
  // Performance monitoring
  tracesSampleRate: env.SENTRY_TRACES_SAMPLE_RATE || 1.0,
  
  ${customInitCode ? `// Custom configuration\n  ${customInitCode}` : ""}
});

${verbose ? "console.log('[Observability] Edge runtime Sentry initialized');" : ""}
`;
}

/**
 * Generate sentry.client.config.ts content (official pattern)
 */
export function createSentryClientConfig(
  config: ClientInstrumentationConfig = {},
): string {
  const {
    customInitCode = "",
    tracePropagationTargets,
    replayOptions,
  } = config;

  // Format trace propagation targets for direct code
  const formattedTargets = tracePropagationTargets
    ? tracePropagationTargets
        .map((t) => (typeof t === "string" ? `'${t}'` : t.toString()))
        .join(",\n    ")
    : `'localhost',\n    /^https:\\/\\/yourserver\\//`;

  return `// This file configures the initialization of Sentry on the client.
// The config you add here will be used whenever a users loads a page in their browser.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,

  integrations: [
    // ___PRODUCT_OPTION_START___ performance
    Sentry.browserTracingIntegration(),
    // ___PRODUCT_OPTION_END___ performance
    
    // ___PRODUCT_OPTION_START___ session-replay
    Sentry.replayIntegration(${replayOptions ? JSON.stringify(replayOptions) : ""}),
    // ___PRODUCT_OPTION_END___ session-replay
    
    // ___PRODUCT_OPTION_START___ user-feedback
    Sentry.feedbackIntegration({
      colorScheme: 'system',
      autoInject: true,
    }),
    // ___PRODUCT_OPTION_END___ user-feedback
  ],

  // ___PRODUCT_OPTION_START___ performance
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  tracesSampleRate: 1.0,

  // Set \`tracePropagationTargets\` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: [
    ${formattedTargets}
  ],
  // ___PRODUCT_OPTION_END___ performance

  // ___PRODUCT_OPTION_START___ session-replay
  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
  // ___PRODUCT_OPTION_END___ session-replay
  
  ${customInitCode}
});
`;
}

/**
 * Generate sentry.server.config.ts content (official pattern)
 */
export function createSentryServerConfig(
  config: InstrumentationConfig = {},
): string {
  const { customInitCode = "" } = config;

  return `// This file configures the initialization of Sentry on the server.
// The config you add here will be used whenever the server handles a request.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: process.env.SENTRY_DSN || process.env.NEXT_PUBLIC_SENTRY_DSN,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,
  
  // ___PRODUCT_OPTION_START___ performance
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  tracesSampleRate: 1.0,
  // ___PRODUCT_OPTION_END___ performance
  
  ${customInitCode}
});
`;
}

/**
 * Generate sentry.edge.config.ts content (official pattern)
 */
export function createSentryEdgeConfig(
  config: InstrumentationConfig = {},
): string {
  const { customInitCode = "" } = config;

  return `// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).
// The config you add here will be used whenever one of the edge features is loaded.
// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: process.env.SENTRY_DSN || process.env.NEXT_PUBLIC_SENTRY_DSN,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,
  
  // ___PRODUCT_OPTION_START___ performance
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  tracesSampleRate: 1.0,
  // ___PRODUCT_OPTION_END___ performance
  
  ${customInitCode}
});
`;
}
