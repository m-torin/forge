# Links Package Environment Variables
# Copy relevant variables to your app's .env.local file

# =============================================================================
# DUB CONFIGURATION (Required for URL shortening)
# =============================================================================

# Dub API Token (required for creating and managing short links)
# Get from: https://dub.co/settings/tokens
DUB_API_KEY=dub_your-api-key-here

# Dub Workspace ID (optional - uses default workspace if not specified)
DUB_WORKSPACE_ID=ws_your-workspace-id

# =============================================================================
# LINK CONFIGURATION (Optional)
# =============================================================================

# Default domain for short links (optional - uses dub.sh if not specified)
DUB_DEFAULT_DOMAIN=dub.sh

# Link expiration settings (optional)
DEFAULT_LINK_EXPIRATION=never
LINK_TTL_DAYS=365

# =============================================================================
# ANALYTICS INTEGRATION (Optional)
# =============================================================================

# Enable analytics integration with @repo/analytics package
ENABLE_LINK_ANALYTICS=true

# Analytics provider for link tracking (posthog, segment)
LINK_ANALYTICS_PROVIDER=posthog

# Batch analytics events (improves performance)
ANALYTICS_BATCH_SIZE=10
ANALYTICS_BATCH_TIMEOUT=5000

# =============================================================================
# RATE LIMITING (Optional)
# =============================================================================

# Rate limits for link operations
LINK_CREATION_RATE_LIMIT=100
LINK_DELETION_RATE_LIMIT=50
LINK_ANALYTICS_RATE_LIMIT=200

# =============================================================================
# CACHING (Optional)
# =============================================================================

# Cache link data (improves performance)
ENABLE_LINK_CACHING=true
LINK_CACHE_TTL=3600

# Cache provider (memory, redis)
LINK_CACHE_PROVIDER=memory

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Debug mode (logs detailed information)
LINK_DEBUG_MODE=true

# Mock mode (don't actually create links, useful for testing)
LINK_MOCK_MODE=false

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Dub Account Setup:
#    - Create account at https://dub.co/
#    - Verify your email and complete onboarding
#    - Go to Settings > Tokens
#    - Create a new API token with appropriate permissions

# 2. API Token Permissions:
#    Required permissions:
#    - links.write (create, update, delete links)
#    - links.read (retrieve link data and analytics)
#    - workspaces.read (access workspace information)

# 3. Workspace Configuration:
#    - Find your workspace ID in Settings > General
#    - Copy the workspace ID (starts with 'ws_')
#    - Add to DUB_WORKSPACE_ID (optional, uses default if not specified)

# 4. Custom Domain Setup (Optional):
#    - Add custom domain in Dub dashboard
#    - Configure DNS records as instructed
#    - Set DUB_DEFAULT_DOMAIN to your custom domain

# 5. Analytics Integration:
#    - Works with @repo/analytics package
#    - Tracks link creation, clicks, and deletion events
#    - Provides non-blocking analytics (links work even if analytics fails)
#    - Use ENABLE_LINK_ANALYTICS=false to disable

# 6. Link Features Available:
#    Basic Operations:
#    ✅ Create short links
#    ✅ Update link destinations
#    ✅ Delete links
#    ✅ Retrieve link analytics
#    
#    Advanced Features:
#    ✅ UTM parameter tracking
#    ✅ Geographic targeting
#    ✅ Device targeting
#    ✅ Expiration dates
#    ✅ Password protection
#    ✅ Custom back-half URLs
#    ✅ Bulk operations

# 7. Usage Examples:
#    ```typescript
#    import { createLinkManager } from '@repo/links/server/next';
#    
#    const linkManager = await createLinkManager();
#    
#    // Create a short link
#    const link = await linkManager.createLink({
#      url: 'https://example.com',
#      key: 'my-link', // optional custom back-half
#      domain: 'dub.sh', // optional custom domain
#    });
#    
#    // Get analytics
#    const analytics = await linkManager.getAnalytics(link.id);
#    ```

# 8. Rate Limiting:
#    - Dub has built-in rate limits
#    - Free plan: 100 links/month
#    - Pro plan: Unlimited links
#    - Enterprise: Custom limits
#    - Monitor usage in Dub dashboard

# 9. Error Handling:
#    - Invalid API key: Check token permissions
#    - Rate limit exceeded: Implement exponential backoff
#    - Domain not found: Verify domain configuration
#    - Link already exists: Use update instead of create

# 10. Best Practices:
#     - Use descriptive custom keys when possible
#     - Monitor link performance and analytics
#     - Set appropriate expiration dates
#     - Use UTM parameters for campaign tracking
#     - Implement proper error handling
#     - Cache frequently accessed link data